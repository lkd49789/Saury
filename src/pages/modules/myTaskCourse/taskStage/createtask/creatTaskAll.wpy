<!--  -->
<style lang="less">
    .body {
        height: 100%;
        .top-title {
            height: 104rpx;
            line-height: 104rpx;
            font-size: 48rpx;
            padding-left: 28rpx;
            border-bottom: 1px solid #dedede;
            position: fixed;
            top:0;
            left:0;
            width:100%;
            background:#fff;
            z-index:99;
        }
        .main{
            margin:149rpx 28rpx 0 28rpx;
            .IsRemind{
                display:flex;
                align-items: center;
                margin-top:-15rpx;
                margin-bottom: 20rpx;
                >view{
                    width: 70%;
                    margin-left:48rpx;
                }
            }
        }
        .addImage {
            width: 160rpx;
            height: 160rpx;
            position: fixed;
            bottom: 0;
            right: 0;
            z-index: 99;
        }
    }
</style>

<template>
    <view class="body">
        <view class="top-title">
            <text>创建任务</text>
        </view>
        <view class='main'>
            <!-- <Title :input.sync="Title" :inputValue.sync='TitleValue' :twoWayTitle="TitleValue" />  
            <Description :input.sync="Description" :inputValue.sync='DescriptionValue' :twoWayTitle="DescriptionValue" />   -->
            <StageId :options.sync="StageId" :index.sync='StageIdIndex' :twoWayTitle="StageIdIndex" />
            <StartTime :timeObj.sync="StartDate" :dateData.sync='StartTime' :twoWayTitle="StartTime" />
            <EndTime :timeObj.sync="EndDate" :dateData.sync='EndTime' :twoWayTitle="EndTime" />
            <Estimate :input.sync="Estimate" :inputValue.sync='EstimateValue' :twoWayTitle="EstimateValue" />
            <Priority :options.sync="Priority" :index.sync='PriorityIndex' :twoWayTitle="PriorityIndex" />
            <view class="IsRemind" style="margin-top:{{isRemindTime?'0':'20rpx'}}">
                <checkbox  value="" checked="{{IsRemindChecked}}" @tap="IsRemind" color="#5d73fa"/>是否提醒
                <RemindTime :options.sync="RemindTime" :index.sync='RemindTimeIndex' :twoWayTitle="RemindTimeIndex" wx:if="{{isRemindTime}}"/>
            </view>
            <view class="IsMark" style="margin-top:{{isRemindTime?'0':'20rpx'}}">
                <checkbox     checked="{{IsMarkChecked}}" @tap="IsMark" color="#5d73fa"/>是否标记
            </view>
        </view>
         <image src="{{'../../../../../images/test.png'}}" mode="scaleToFill" lazy-load="true" class="addImage"  style="opacity:{{addOpacity}};"  @touchstart="touchStart" @touchend="touchEnd">
        </image>
    </view>
</template>

<script>
    import wepy from 'wepy';
    import { GeneralCodeComboboxItems } from '@/api/common.js';
    import { OrUpdateTask,TaskStages } from '@/api/myTaskCourse.js';
    import Estimate from '@/components/picker/input';
    import Option from '@/components/picker/option';
    import DateTimePicker from'@/components/Date/DateTimePicker';
    export default class creatTaskAll extends wepy.page {
        components = {
            StageId:Option,
            RemindTime:Option,
            Priority:Option,
            StartTime:DateTimePicker,
            EndTime:DateTimePicker,
            Estimate,
        };
        data = {
            // submitData:{
                // Address: "地址地址地址"
                // AttachmentId: ""
                // Description: "任务详情详情"
                // EmployeeId: "84"
                // EndTime: "2018-08-27 13:24:41"
                // Estimate: "9999999999"
                // Id: "temp_557fec23d57551d8"
                // IsCase: "1"
                // IsMark: "Y"
                // IsRemind: "Y"
                // MarkColor: ""
                // ParentTaskId: ""
                // Participant: "84,151"
                // Priority: "URGENT"
                // ProjectId: "59C85492-438E-E811-8884-F6126329C109"
                // RemindTime: "45"
                // StageId: "8472b6b282bade56"
                // StartTime: "2018-08-15 13:30:26"
                // Tag: "b'q,fdsf"
                // Title: "标题标题标题标题标题标题标题"
                // checkItems: []
                // subtaskaddinput: ""
            // },
            addOpacity:1,
            submitData:{

            },
         
            StageId:{
                title:'任务阶段',
                name:'StageId',
                value:[],
                displayText:[],
                warning:false
            },
            // 时间
            StageIdIndex:0,
            StartDate: {
                title: '开始时间',
                name: 'StartTime',
                isChecked:false,
                time:'',
                date:true
            },
            StartTime: '',
            EndDate: {
                title: '结束时间',
                name: 'endTime',
                isChecked:false,
                time:'',
                date:false
            },
            EndTime: '',
            // *********************
            //预计时间
            Estimate:{
                title: '预估时长（小时）',
                name: 'Estimate',
                options: false,
                warning: false,
                // type:'digit',
            },
            EstimateValue:'',
            Priority:{
                title:'优先级',
                name:'Priority',
                value:[],
                displayText:[],
                warning:false
            },
            PriorityIndex:-1,
           //会议提醒
            RemindTime:{
                // title:'',
                value: [0,5,10,15,30,45,60,90,120,150,180,240,300,360,420,480,540,600,660,720,1440,2880,4320,5760,10080,20160],
                displayText: ['无','5分钟','10分钟','15分钟','30分钟','45分钟','1小时','1.5小时','2小时','2.5小时','3小时','4小时','5小时','6小时','7小时','8小时','9小时','10小时','11小时','0.5天','1天','2天','3天','4天','1周','2周'],
            },
            RemindTimeIndex:0,
            IsRemind:[
               {value: "Y", displayText: "是"},
                {value: "N", displayText: "否"}
            ],
            IsRemindChecked:false,
            isRemindTime:false,
            IsMark:[],
            IsMarkChecked:false,
        };
        methods = {
            touchStart(){
                this.addOpacity = 0.6;
                this.$apply();
            },
            touchEnd(){
                wx.removeStorage({
                    key: 'taskNextPage'
                });
                delete this.submitData.currentStage;
                this.CreateOrUpdateTask();
            },
            IsRemind(){
                this.IsRemindChecked = !this.IsRemindChecked;
                if(this.IsRemindChecked){
                    this.submitData.IsRemind = this.IsRemind[0].value;
                     this.isRemindTime = true;
                }else{
                    this.submitData.IsRemind=this.IsRemind[1].value;
                     this.isRemindTime = false;
                     this.RemindTimeIndex = 0;
                     this.submitData.RemindTime = 0;
                }
                this.$apply();
            },
            IsMark(){
                this.IsMarkChecked=!this.IsMarkChecked;
                if(this.IsMarkChecked){
                    this.submitData.IsMark = this.IsMark[0].value;
                }else{
                    this.submitData.IsMark = this.IsMark[1].value;
                }
            }
        }; 
        watch={
            StageIdIndex(index){
                this.submitData.StageId = this.StageId.value[index]
                this.$apply();
            },
            StartTime(dateData){
                var StartDate=dateData[0] + '-'+dateData[1] + '-' + dateData[2] + ' ' + dateData[3] + ':' + dateData[4] + ':' + dateData[5];
                this.submitData.StartTime=StartDate;
                this.millDif()
                this.$apply();
            },
            EndTime(dateData){
                this.submitData.EndTime=dateData[0] + '-' + dateData[1] + '-' + dateData[2] + ' ' + dateData[3] + ':' + dateData[4] + ':' + dateData[5];
                this.millDif()
                this.$apply();
            },
            EstimateValue(value){
                this.submitData.Estimate = value;
                this.$apply();
            },
            PriorityIndex(index){
                this.submitData.Priority = this.Priority.value[index];
                this.$apply(); 
            },
            RemindTimeIndex(index){
                this.submitData.RemindTime = this.RemindTime.value[index];
                this.$apply();
            },
            // millDif(value){
            //     this.EstimateValue=value;
            //     this.submitData.Estimate=value;
            //     this.$apply();
            // }
        };
        computed= {
           
        }
        async GetTaskForEdit(id,projectId){
            var data={
                id: '', 
                projectid: projectId,
                stageid: id,
            }
            var resData = await TaskStages(data);
            console.log(resData);
            if(resData.statusCode == 200){
                var Task = resData.data.result;
                //阶段
                for(var index in Task){
                    this.StageId.value[index] = Task[index].id;
                    this.StageId.displayText[index] = Task[index].name;
                    this.submitData.StageId = Task[this.StageIdIndex].value;
                }
                //优先级
                // for(var Pindex in Task.priorityCombobox){
                //     this.Priority.value[Pindex] = Task.priorityCombobox[Pindex].value;
                //     this.Priority.displayText[Pindex] = Task.priorityCombobox[Pindex].displayText;
                // }
                //是否提醒
                this.IsRemind = Task.isRemindCombobox;
                // 是否标记
                this.IsMark = Task.isMarkCombobox;
                this.$apply();
            }else{
                wx.showToast({
                    title: resData.data.error.message,
                    icon: 'none',
                    duration: 1500,
                    mask: false,
                });
            }
        }
        async CreateOrUpdateTask(){
             wx.showLoading({
                 title: '提交中，请稍等！', //提示的内容,
                 mask: true, //显示透明蒙层，防止触摸穿透,
                 success:()=>{
                    
                 }
               });
            var resData = await OrUpdateTask(this.submitData)
            if(resData.statusCode == 200){
                this.addOpacity = 1;
                    var pages = getCurrentPages();
                    var prevPage = pages[pages.length - 3]; //上一个页面
                    var prevPages = pages[pages.length - 4]; //上一个页面
                    if (prevPage && prevPages) {
                        prevPage.isRefresh();
                        prevPages.isRefresh ? prevPages.isRefresh() : '';
                        wx.navigateBack({
                            delta: 2,
                        });
                    }
                    this.$apply();
            }else{
                wx.showToast({
                    title: resData.data.error.message,
                    icon: 'none',
                    duration: 1500,
                    mask: false,
                });
            }
        }
         millDif(){
            if(this.submitData.StartTime && this.submitData.EndTime){
                var StartDateTime = new Date(this.submitData.StartTime).getTime();
                var EndDateTime = new Date(this.submitData.EndTime).getTime(); 
                var millDif = EndDateTime - StartDateTime;
                var hours = '';
                if(millDif >= 10 * 1000){   
                    hours = (millDif / (3600*1000)).toFixed(1);
                }else{
                    hours = 0;
                    wx.showToast({
                      title: '时差有误！', //提示的内容,
                      icon: 'none', //图标,
                      duration: 2000, //延迟时间,
                      mask: false, //显示透明蒙层，防止触摸穿透,
                      success: res => {}
                    });
                }
                this.EstimateValue = hours;
                this.submitData.Estimate = hours;
            }
        } 
        // 获取优先级
        async GetGeneralCodeComboboxItems(){
            let { data } = await GeneralCodeComboboxItems({id: "PRIORITY"})
            data.result.forEach((item,index) =>{
                this.Priority.value[index] = item.value;
                this.Priority.displayText[index] = item.displayText;
            })
            this.$apply();
        }
        onLoad() {
            this.submitData = wx.getStorageSync('taskNextPage');
            this.StageIdIndex = Number(this.submitData.currentStage);
            this.EndDate.time = new Date();
            this.StartDate.time = new Date();
            this.EstimateValue = 1;
            this.$apply();
            this.GetTaskForEdit(this.submitData.stageId,this.submitData.ProjectId);
            this.GetGeneralCodeComboboxItems()
        }
    }
</script>