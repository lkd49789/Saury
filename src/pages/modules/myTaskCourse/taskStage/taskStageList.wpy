<!--  -->
<style lang="less">
    .body {
        height: 100%;
        .placeHolderImage {
            position: fixed;
            top: 106rpx;
            left: 0;
            height: 92%;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            background: #fff
        }
        .top-title {
            height: 104rpx;
            line-height: 104rpx;
            font-size: 48rpx;
            padding-left: 28rpx;
            border-bottom: 1px solid #dedede;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background: #fff;
            z-index: 99;
        }
        .addBtn {
            width: 160rpx;
            height: 160rpx;
            position: fixed;
            bottom: 0;
            right: 0;
            z-index: 99999;
        }
        .main {
            .task-list {
                margin: 149rpx 15rpx 0 15rpx;
                border: 1px solid #dfdfdf;
                border-top-left-radius: 20rpx;
                border-top-right-radius: 20rpx;
                >view:first-child {
                    background: #dfdfdf;
                    padding: 30rpx 20rpx;
                    border-top-left-radius: 19rpx;
                    border-top-right-radius: 19rpx;
                    >view:first-child {
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        >view {
                            display: flex;
                            align-items: center;
                            justify-content: space-between;
                            position: relative;
                            >view {
                                display: flex;
                                width: 40rpx;
                                height: 40rpx;
                                border: 1px solid #ff9900;
                                border-radius: 50%;
                                align-items: center;
                                justify-content: center;
                                margin-right: 50rpx;
                                color: #ff9900;
                            }
                            icon {
                                position: absolute;
                                top: -10rpx;
                                right: 0;
                            }
                        }
                    }
                    >view:last-child {
                        margin: 20rpx 0;
                    }
                }
                .task-item {
                    display: flex;
                    padding: 0 28rpx;
                    align-items: center;
                    height: 100%;
                    justify-content: space-between;
                    .item-info {
                        padding: 33rpx 10rpx 33rpx 0;
                        border-bottom: 1px solid #dfdfdf;
                        .item-title {
                            overflow: hidden;
                            white-space: nowrap;
                            text-overflow: ellipsis;
                        }
                        .item-statistics {
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                        }
                    }
                    .item-isAccept {
                        margin-right: -27rpx;
                        height: 158rpx;
                        width: 38rpx;
                        color: #fff;
                        display: flex;
                        align-items: center;
                        justify-content: center; // padding:19rpx 0;
                        >text {
                            text-align: center;
                        }
                    }
                }
                >view:last-child {
                    >view:nth-child(1) {
                        border-bottom: 0;
                    }
                    >view:nth-child(2) {
                        border-bottom: 0;
                    }
                }
            }
            .add-task {
                display: flex;
                margin: 0rpx 15rpx 0 15rpx;
                border: 1px solid #dfdfdf;
                border-top: 0;
                border-bottom-left-radius: 20rpx;
                border-bottom-right-radius: 20rpx;
                padding: 23rpx 28rpx;
                align-items: center;
                color: #7a7a7a;
                >text:first-child {
                    border: 1px dotted #dedede;
                    font-size: 37rpx;
                    padding: 0 14rpx;
                    margin-right: 20rpx;
                }
            }
        }
        .loseColor {
            color: #7a7a7a !important;
            text {
                text-decoration: line-through;
            }
        }
    }
</style>

<template>
    <view class="body">
        <view class="top-title">
            <text>任务阶段</text>
        </view>
        <view class='main'>
            <swiper indicator-dots="{{indicatorDots}}" autoplay="{{autoplay}}" interval="{{interval}}" duration="{{duration}}" style="min-height:{{viewHeight[current]}}rpx" circular="{{circular}}" previous-margin='30rpx' next-margin="30rpx" bindchange='bindchange'
                current="{{current}}">
                <repeat for="{{TaskStagesDatas}}" key="index" index="sIndex" item="item">
                    <swiper-item>
                        <view class="task-list">
                            <view>
                                <view>
                                    <text>{{item.name}}</text>
                                    <view>
                                        <view>
                                            <text>{{item.taskCount}}</text>
                                        </view>
                                        <icon class="iconfont icon-gengduoneirongdianjichakanxiangqing" catchtap="moreChoose('{{item}}','{{sIndex}}')"></icon>
                                    </view>
                                </view>
                                <view>
                                    <text>{{item.remark||'未填写'}}</text>
                                </view>
                            </view>
                            <!-- <scroll-view scroll-y scroll-with-animation @scroll="scroll" style="heihgt:500rpx;white-space:nowrap;"> -->
                            <repeat for="{{TasksDatas[sIndex].items}}" key="index" index="index" item="item">
                                <view class="task-item" @tap="toTaskDetail('{{item.id}}','{{index}}','{{sIndex}}','{{item.isAccept}}','{{item.isParticipant}}')" bindlongpress="longpress('{{item.id}}','{{index}}')">
                                    <view style="margin-right:20rpx" wx:if="{{item.isAccept=='Y'&&item.isParticipant=='Y'}}">
                                        <checkbox value="{{item.title}}" checked="{{item.checked}}" color="#5d73fa" catchtap="isChecked('{{sIndex}}','{{index}}','{{item.checked}}','{{item.id}}'),'{{item.childTask}}'" />
                                    </view>
                                    <view style="width:{{item.isAccept=='Y'?'86%':'97%'}};" class="{{item.checked?'loseColor':''}} item-info">
                                        <view class="item-title">
                                            <text>{{item.title||'未填写'}}</text>
                                        </view>
                                        <view class="item-statistics">
                                            <view style="color:#7a7a7a">
                                                <icon class="iconfont icon-riqi" style="font-size:30rpx;margin-right:20rpx"></icon>
                                                <text>{{item.endTime||'未填写'}}</text>
                                            </view>
                                            <view>
                                                <icon class="iconfont icon-fujian-copy" style="font-size:30rpx;color:#5d73fa;margin-right:20rpx"></icon>
                                                <text style="margin-right:20rpx">{{item.attachmentCount}}</text>
                                                <icon class="iconfont icon-zirenwu-copy" style="font-size:30rpx;color:#5d73fa;margin-right:20rpx"></icon>
                                                <text>{{item.checkItemCount}}</text>
                                            </view>
                                        </view>
                                    </view>
                                    <view class="item-isAccept" style="background:#ff9900" wx:if="{{item.isAccept=='N'&&item.isParticipant=='Y'}}">
                                        <text>未确认</text>
                                    </view>
                                </view>
                            </repeat>
                        </view>
                        <view class="add-task" catchtap="addTask('{{item.projectId}}')">
                            <text>+</text>
                            <text>新建任务</text>
                        </view>
                    </swiper-item>
                </repeat>
            </swiper>
        </view>
        <image src="{{'../../../../images/add.png'}}" mode="scaleToFill" lazy-load="true" class="addBtn" style="opacity:{{addOpacity}} ;" @touchstart="touchStart" @touchend="touchEnd" />
    </view>
</template>

<script>
    import wepy from 'wepy';
    import { TaskStages, Tasks, TaskParticipant, DeleteTasks, DeleteTaskStages } from '@/api/myTaskCourse.js'
    import {
        formatTimeSymbol
    } from '@/utils/cofig/api.js';
    export default class clientDetail extends wepy.page {
        config = {
            enablePullDownRefresh: true,
            backgroundTextStyle: 'dark',
            backgroundColorTop: '#f4f4f4',
            backgroundColorBottom: '#f4f4f4',
        };
        data = {
            addOpacity: 1,
            duration: 300,
            circular: false,
            projectId: '',
            TaskStagesDatas: [],
            TasksDatas: [],
            setTimeout: '',
            viewHeight: [],
            pageNumber: [],
            current: 0,
            stageId: [],
            category: '',
            operationsNubmer:0,
        };
        methods = {
            // 删除任务
            longpress(id, index) {
                wx.showModal({
                    title: '是否确认删除该项任务！',
                    content: '',
                    showCancel: true,
                    cancelText: '取消',
                    cancelColor: '#000000',
                    confirmText: '确定',
                    confirmColor: '#5d73fa',
                    success: res => {
                        if (res.confirm) {
                            this.DeleteTask(id, index);
                        }
                    }
                });
            },
            // 更多选项
            moreChoose(item,index) {
                var nextSort=this.TaskStagesDatas.length-1>index?this.TaskStagesDatas[index+1].sort:0;
                var itemList = ['在此后添加新阶段', '新建任务', '删除'];
                wx.showActionSheet({
                    itemList: itemList,
                    itemColor: '#5d73fa',
                    success: res => {
                        if (res.tapIndex == 0) {
                            wx.navigateTo({
                                url: './createtask/createStage?projectId=' + item.projectId + '&sort=' + item.sort+'&nextSort='+nextSort
                            });
                        }
                        if (res.tapIndex == 1) {
                            wx.navigateTo({
                                url: './createtask/creatTask?projectId=' + item.projectId + '&currentStage=' + this.current + '&category=' + this.category
                            });
                        }
                        if (res.tapIndex == 2) {
                            if(item.taskCount==0&&item.participantTaskCount==0){
                                this.DeleteTaskStage(item.id, index);
                            }else{
                                wx.showToast({
                                  title: '对不起，请先清空此阶段列表上的任务，然后再删除这个阶段列表！', //提示的内容,
                                  icon: 'none', //图标,
                                  duration: 2000, //延迟时间,
                                  mask: true, //显示透明蒙层，防止触摸穿透,
                                  success: res => {}
                                });
                            }
                            
                        }
                    }
                });
            },
            //新建任务
            addTask(projectId) {
                wx.navigateTo({
                    url: './createtask/creatTask?projectId=' + projectId + '&currentStage=' + this.current + '&category=' + this.category
                });
            },
            touchStart() {
                this.addOpacity = 0.6;
                this.$apply();
            },
            // 创建阶段任务（最后）;
            touchEnd() {
                var sort=this.TaskStagesDatas.length>0?this.TaskStagesDatas[this.TaskStagesDatas.length - 1].sort:1;
                var projectId = this.projectId;
                wx.navigateTo({
                    url: './createtask/createStage?projectId=' + projectId + '&sort=' + sort
                });
                this.addOpacity = 1;
                this.$apply();
            },
            //是否完成任务
            isChecked(sIndex, index, checked, id) {
                if (!this.TasksDatas[sIndex].items[index].childTask) {
                    this.TasksDatas[sIndex].items[index].checked = true
                    var Timeout = setTimeout(() => {
                        this.TasksDatas[sIndex].items[index].checked = false
                        this.$apply();
                    }, 0);
                    this.setTimeout = Timeout;
                    wx.showToast({
                        title: '请先检查子任务！',
                        icon: 'none',
                        duration: 1500,
                        mask: false,
                    });
                } else if (!checked) {
                    this.CompletedTaskParticipant(id, 'Y', checked);
                    this.TasksDatas[sIndex].items[index].checked = !this.TasksDatas[sIndex].items[index].checked
                } else {
                    this.CompletedTaskParticipant(id, 'N', checked)
                    this.TasksDatas[sIndex].items[index].checked = !this.TasksDatas[sIndex].items[index].checked
                }
                this.$apply();
            },
            bindchange(e) {
                this.current = e.detail.current;
                this.$apply();
            },
            // 详情
            toTaskDetail(id) {
                wx.navigateTo({
                    url: '../taskStage/taskDetail/taskdetail?id=' + id
                });
            }
        };
        watch = {
            current(newValue, oldValue) {
                if (newValue !== oldValue)
                    wx.pageScrollTo({
                        scrollTop: 0,
                        duration: 0
                    });
            },
            operationsNubmer(number,oldNumber){
                if(number!==oldNumber){
                    var pages = getCurrentPages();
                    var prevPage = pages[pages.length - 2]; //上一个页面
                    if (prevPage) {
                        prevPage.isRefresh();
                    }
                }
            }
        }
        // 下拉刷新
        onPullDownRefresh() {
            this.TaskStagesDatas = [];
            this.TasksDatas = [];
            this.viewHeight = [];
            this.pageNumber = [];
            this.stageId = [];
            this.GetTaskStages();
            wx.hideNavigationBarLoading(); //完成停止加载
            wx.stopPullDownRefresh(); //停止下拉刷新
            this.$apply();
        }
        // 上拉加载
        onReachBottom() {
            if (this.TasksDatas[this.current].totalCount / 100 > this.pageNumber[this.current] && this.$parent.global.netWorkString) {
                this.pageNumber[this.current] += 1;
                this.GetTasks(this.current, this.stageId[this.current])
            } else {
                if (this.$parent.global.netWorkString) {
                    wx.showToast({
                        title: '我们是有底线的！',
                        icon: 'none',
                        duration: 1500,
                        mask: false,
                    });
                } else {
                    wx.showToast({
                        title: '网络连接失败！',
                        icon: 'none',
                        duration: 1500,
                        mask: false,
                    });
                }
            }
            this.$apply();
        }
        //获取任务阶段
        async GetTaskStages() {
            var data = {
                projectId: this.projectId
            }
            var TaskStagesDatas = await TaskStages(data)
            if(TaskStagesDatas.statusCode == 200){
                var TaskStagesData = TaskStagesDatas.data.result;
                this.TaskStagesDatas = TaskStagesData;
                for (var index in TaskStagesData) {
                    var stageId = TaskStagesData[index].id;
                    this.stageId[index] = TaskStagesData[index].id
                    this.pageNumber[index] = 1;
                    this.viewHeight[index] = 580;
                    this.GetTasks(index, stageId);
                }
                    this.$apply();
            }
        }
        //获取任务项
        async GetTasks(index, stageId) {
            wx.showLoading({
              title: 'Loading...', //提示的内容,
              mask: true, //显示透明蒙层，防止触摸穿透,
              success: res => {
                  
              }
            });
            var data = {
                pageNumber: this.pageNumber[index],
                pageSize: 100,
                stageId: stageId,
                projectId: this.projectId
            }
            var GetTasksDatas = await Tasks(data)
            if (GetTasksDatas.data.result.items.length !== 0) {
                var TasksData = GetTasksDatas.data.result
                var childChecked = [];
                for (var i in TasksData.items) {
                    if (TasksData.items[i].isCompleted == 'Y') {
                        TasksData.items[i]['checked'] = true
                    } else {
                        TasksData.items[i]['checked'] = false
                    }
                    if (TasksData.items[i].isCompleted == 'D') {
                        TasksData.items[i]['childTask'] = false
                    } else {
                        TasksData.items[i]['childTask'] = true
                    }
                    if (TasksData.items[i].endTime) {
                       var millTime=new Date(TasksData.items[i].endTime).getTime();
                        TasksData.items[i].endTime=new Date(millTime);
                        TasksData.items[i].endTime = formatTimeSymbol(TasksData.items[i].endTime, '/');
                    }
                }
                this.TasksDatas[index] = TasksData;
                this.viewHeight[index] += TasksData.items.length * 175;
            } else {
                // child[index].push([])
                this.TasksDatas[index] = {
                    item: [],
                    totalCount: 0
                }
            }
            // console.log(child)
            this.$apply();
        }
        //完成任务
        async CompletedTaskParticipant(id, isCompleted, checked) {
            wx.showLoading({
                title: '完成中，请稍等！', //提示的内容,
                mask: true, //显示透明蒙层，防止触摸穿透,
            });
            var date = new Date();
            var data = {
                isMark: "Y",
                isParticipant: "Y",
                isRemind: "Y",
                endTime: date,
                id: id,
                isCompleted: isCompleted,
                projectId: this.projectId
            };
            var res = await TaskParticipant(
                data
            )
            if (res.data.success) {
                if (res.statusCode == 200 && res.data.success) {
                    if (!checked) {
                        wx.showToast({
                            title: '已完成',
                            icon: 'none',
                            duration: 1500,
                            mask: false,
                        });
                    } else {
                        wx.showToast({
                            title: '已取消',
                            icon: 'none',
                            duration: 1500,
                            mask: false,
                        });
                    }
                }
            }
        }
        //删除阶段任务
        async DeleteTaskStage(id, index) {
            var id = {
                id: id
            }
            var resData = await DeleteTaskStages(id)
            if (resData.statusCode == 200) {
                // this.TaskStagesDatas = [];
                // this.TasksDatas = [];
                this.operationsNubmer+=1;
                this.viewHeight = this.viewHeight.splice(index, 1)
                this.pageNumber = this.pageNumber.splice(index, 1)
                this.stageId = this.stageId.splice(index, 1)
                if (this.current > 0) {
                    this.current = this.current - 1;
                } else {
                    this.current = 0;
                }
                this.GetTaskStages();
                this.$apply();
            } else {
                wx.showToast({
                    title: resData.data.error.message,
                    icon: 'none',
                    duration: 1500,
                    mask: false,
                });
            }
        }
        //删除任务项
        async DeleteTask(id, index) {
            var data = {
                id
            }
            var resData = await DeleteTasks(
                data
            )
            if (resData.statusCode == 200) {
                this.operationsNubmer+=1;
                this.TasksDatas.totalCount -= 1;
                this.TasksDatas.items = this.TasksDatas.splice(index, 1);
                this.current = this.current;
                this.GetTaskStages();
                this.GetTasks();
                this.$apply();
            } else {
                wx.showToast({
                    title: resData.data.error.message,
                    icon: 'none',
                    duration: 1500,
                    mask: false,
                });
            }
        }
        onLoad(options) {
            this.projectId = options.id;
            this.category = options.category;
            this.GetTaskStages();
        }
        isRefresh() {
            this.TaskStagesDatas = [];
            this.TasksDatas = [];
            this.viewHeight = [];
            this.pageNumber = [];
            this.stageId = [];
            this.GetTaskStages();
        }
    }
</script>