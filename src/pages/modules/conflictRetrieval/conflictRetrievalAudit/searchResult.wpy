<!--  -->
<style lang='scss'>
    .container {
        height: 100%;
        .pageTitle {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background: #fff;
            z-index: 999;
            display: flex;
            flex-direction: column;
            .title{
                height: 104rpx;
                line-height: 104rpx;
                font-size: 48rpx;
                border-bottom: 1px solid #dedede;
                padding-left:28rpx;
            }
            .allChecked{
                display:flex;
                align-items: center;
                justify-content: space-between;
                padding:0 28rpx;
                height:90rpx;
                line-height:90rpx;
            }

        }
        .main {
            padding-top: 200rpx;
            position: relative;
            .main-title {
                padding: 14rpx 28rpx;
                background: #f4f4f4;
                color: #2a2a2a;
                font-weight: bold;
                margin-bottom: 44rpx;
                display:flex;
                align-items: center;
                justify-content: space-between;
                .groupChecked{
                    display:flex;
                    align-items: center;
                }
            }
            .item {
                padding: 0 28rpx;
                margin-bottom: 44rpx;
                display: flex;
                align-items: center; // justify-content: space-between;
                .checked {
                    margin-right: 28rpx;
                }
                .right-content {
                    flex: 1;
                    .text-info {
                        flex: 1;
                        box-shadow: 0px 8px 30px rgba(65, 98, 213, 0.25);
                        border-radius: 20rpx;
                        padding: 30rpx 24rpx;
                        color: #7a7a7a;
                        >view:not(:last-child) {
                            margin-bottom: 14rpx;
                        }
                        >view:first-child {
                            display: flex;
                            align-items: center;
                            justify-content: space-between;
                            >text {
                                flex: 1;
                                color: #2a2a2a;
                            }
                        }
                        >view:last-child {
                            display: flex;
                            align-items: center;
                            justify-content: space-between;
                            >text {
                                flex: 1;
                            }
                            >view {
                                display: flex;
                                align-items: center;
                                >text:first-child {
                                    height: 20rpx;
                                    width: 20rpx;
                                    border-radius: 50%;
                                    border: 1px solid #ff9900;
                                    margin-right: 14rpx;
                                }
                            }
                        }
                    }
                    .litigantList {
                        box-shadow: 0px 8px 30px rgba(65, 98, 213, 0.25);
                        border-radius: 20rpx;
                        padding: 30rpx 24rpx;
                        margin: 0 20rpx;
                        .litigantList-item {
                            border-bottom: 1px solid #dedede;
                            padding-bottom: 20rpx;
                            margin-bottom: 20rpx;
                            >view:first-child {
                                color: #7a7a7a;
                            }
                            >view:not(:last-child) {
                                margin-bottom: 14rpx;
                            }
                        }
                    }
                }
            }
        }
        .subBtn {
            width: 160rpx;
            height: 160rpx;
            position: fixed;
            bottom: 0;
            right: 0;
            z-index: 9999;
        }
    }
</style>

<template>
    <view class='container'>
        <view class="pageTitle">
            <view class="title">检索列表</view>
            <view class="allChecked" wx:if="{{caseCheckListFilterDatas.length>0}}">
                <view class="checked" style="color:#7a7a7a">
                        <checkbox value="allChecked" checked="{{isAllChecked}}" @tap="isAllChecked" color="#5d73fa" />全选
                </view>
                <picker bindchange="bindPickerChange" value="{{filterKeys.key_index}}" range="{{filterKeys.displayText}}">
                    <view class="picker">
                        <text style="font-size:28rpx;color:#5d73fa;margin-right:14rpx">{{filterKeys.displayText[filterKeys.key_index]}}</text>
                        <icon class="iconfont icon-gengduoneirongdianjichakanxiangqing" style="font-size:30rpx;color:#7a7a7a"></icon>
                    </view>
                </picker>
            </view>
        </view>
        <view class="main" wx:if="{{caseCheckListFilterDatas.length>0}}">
            <repeat for="{{caseCheckListFilterDatas}}" key="index" index="index" item="item">
                <view class="main-title">
                    <view class="groupChecked">
                        <view class="checked" style="color:#7a7a7a;margin-right:14rpx">
                            <checkbox value="groupChecked" checked="{{item.isGroupChecked}}" @tap="isGroupChecked('{{index}}')" color="#5d73fa" />
                        </view>
                        <text>{{filterKeys.displayText[filterKeys.key_index]}}：{{caseCheckListFilterDatas[index].title||'其他'}}</text>
                    </view>
                     <view @tap="isFold('{{index}}')">
                        <icon class="iconfont icon-jian" style="font-size:40rpx;color:#5d73fa;margin-right:14rpx" wx:if="{{!item.isFold}}"></icon>
                        <icon class="iconfont icon-jia" style="font-size:40rpx;color:#5d73fa;margin-right:14rpx" wx:else></icon>
                    </view>
                </view>
                <view wx:if="{{!item.isFold}}">
                    <repeat for="{{caseCheckListFilterDatas[index].items}}" key="index_item" index="index_item" item="item">
                        <view class="item">
                            <view class="checked">
                                <checkbox value="{{item}}" checked="{{item.isChecked}}" @tap="isChecked('{{index}}','{{index_item}}')" color="#5d73fa" />
                            </view>
                            <view class="right-content">
                                <view class="text-info">
                                    <view>
                                        <text>{{item.clientName||'未填写'}}</text>
                                        <icon class="iconfont icon-gengduo" style="font-size:40rpx;" wx:if="{{item.litigantList.length>0}}" @tap="isShowLitigantList('{{index}}','{{index_item}}')"></icon>
                                    </view>
                                    <view>{{item.clientEnName||'未填写'}}</view>
                                    <view>{{item.caseName||'未填写'}}</view>
                                    <view>{{item.caseCategory||'未填写'}}</view>
                                    <view>
                                        <text>{{item.caseManager||'未填写'}}</text>
                                        <view>
                                            <text></text>
                                            <text>{{item.caseStatusText||'未填写'}}</text>
                                        </view>
                                    </view>
                                </view>
                                <view wx:if="{{item.isShowLitigantList}}" class="litigantList">
                                    <repeat for="{{caseCheckListFilterDatas[index].items[index_item].litigantList}}" key="litigantList_index" index="litigantList_index" item="item">
                                        <view class="litigantList-item">
                                            <view>{{item.category}}</view>
                                            <view>{{item.name}}</view>
                                            <view>{{item.enName}}</view>
                                        </view>
                                    </repeat>
                                </view>
                            </view>
                        </view>
                    </repeat>
                </view>
            </repeat>
        </view>
        <view class="placeHolderImage" wx:else>
            <image src="{{'../../../../images/noData.png'}}" mode="scaleToFill" lazy-load="false" style="width:580rpx;height:580rpx">
            </image>
        </view>
        <image src="{{'../../../../images/next.png'}}" mode="scaleToFill" lazy-load="true" class="subBtn" @touchend="nextPage" />
    </view>
</template>

<script>
    import wepy from 'wepy';
    import ajax from '@/utils/cofig/ajax.js';
    export default class searchResult extends wepy.page {
        config = {
            enablePullDownRefresh: true,
            backgroundTextStyle: 'dark',
            backgroundColorTop: '#f4f4f4',
            backgroundColorBottom: '#f4f4f4',
        };
        data = {
            searchResult: [], //查询条件
            caseCheckListFilterDatas: [],
            totalCount: 0,
            pageNumber: 1,
            pageSize: 10,
            conditionKey: 'clientName',
            isAllChecked:true,
            filterKeys: {
                displayText: [
                    '客户名称',
                    '负责人',
                    '案件类别',
                    '状态'
                ],
                value: [
                    'clientName',
                    'caseManager',
                    'caseCategory',
                    'caseStatus'
                ],
                key_index: 0,
            },
            submitData: []
        };
        components = {};
        methods = {
            isAllChecked(){
                this.isAllChecked=!this.isAllChecked;
                for(var i=0;i<this.caseCheckListFilterDatas.length;i++){
                    if(this.isAllChecked){
                         this.caseCheckListFilterDatas[i].isGroupChecked=true;
                        this.caseCheckListFilterDatas[i].items.map((item)=>{
                        return item.isChecked=true
                        })
                    }else{
                        this.caseCheckListFilterDatas[i].isGroupChecked=false;
                         this.caseCheckListFilterDatas[i].items.map((item)=>{
                         return item.isChecked=false
                        })
                    }  
                }
                this.$apply();
            },
            isGroupChecked(index){
                this.caseCheckListFilterDatas[index].isGroupChecked = !this.caseCheckListFilterDatas[index].isGroupChecked;
                if(this.caseCheckListFilterDatas[index].isGroupChecked){
                    this.caseCheckListFilterDatas[index].items.map((item)=>{
                        return item.isChecked=true
                    })
                }else{
                     this.caseCheckListFilterDatas[index].items.map((item)=>{
                        return item.isChecked=false
                    })
                }
                this.$apply();
            },
            nextPage() {
                let subData = [];
                for (let i = 0, len = this.caseCheckListFilterDatas.length; i < len; i++) {
                    for (let j = 0, len = this.caseCheckListFilterDatas[i].items.length; j < len; j++) {
                        if (this.caseCheckListFilterDatas[i].items[j].isChecked) {
                            subData.push(this.caseCheckListFilterDatas[i].items[j]);
                        }
                    }
                }
                var Create_ConflictCheck_Data = wx.getStorageSync('CREATE_CONFLICTCHECK_DATA');
                Create_ConflictCheck_Data.checkResults = subData;
                wx.setStorage({
                    key: 'CREATE_CONFLICTCHECK_DATA',
                    data: Create_ConflictCheck_Data,
                    success: () => {
                        wx.navigateTo({
                            url: './subSearchResult'
                        });
                    }
                });
            },
            isFold(index) {
                this.caseCheckListFilterDatas[index].isFold = !this.caseCheckListFilterDatas[index].isFold;
                this.$apply();
            },
            isChecked(index, index_item) {
                this.caseCheckListFilterDatas[index].items[index_item].isChecked = !this.caseCheckListFilterDatas[index].items[index_item].isChecked;
            },
            isShowLitigantList(index, index_item) {
                this.caseCheckListFilterDatas[index].items[index_item].isShowLitigantList = !this.caseCheckListFilterDatas[index].items[index_item].isShowLitigantList;
            },
            bindPickerChange(e) {
                this.filterKeys.key_index = e.detail.value;
                this.pageNumber = 1;
                this.caseCheckListFilterDatas = [];
                switch (this.filterKeys.value[e.detail.value]) {
                    case 'clientName':
                        this.conditionKey = "clientName";
                        break;
                    case 'caseManager':
                        this.conditionKey = "caseManager";
                        break;
                    case 'caseCategory':
                        this.conditionKey = "caseCategory";
                        break;
                    case 'caseStatus':
                        this.conditionKey = "caseStatusText";
                        break;
                    default:
                        break;
                }
                this.GetCaseCheckList()
                this.$apply();
            }
        };
        events = {};
        watch = {
            caseCheckListFilterDatas(value){
                for(var i=0;i<value.length;i++){
                    this.caseCheckListFilterDatas[i].isGroupChecked=value[i].items.every((item)=>{
                        return item.isChecked
                    })
                }
                this.isAllChecked=value.every((item)=>{
                    return item.isGroupChecked
                })  
            },
            filterKeys(value, oldValue) {
                if (value.key_index !== oldValue.key_index) {
                    wx.pageScrollTo({
                        scrollTop: 0,
                        duration: 0,
                    });
                }
            }
        };
        filterData(data, key) {
            var filter = this.caseCheckListFilterDatas;
            for (var i = 0, len = data.length; i < len; i++) {
                var obj = {};
                if (filter.length == 0 || data[i][key] == 'null') {
                    var obj = {}
                    obj.items = []
                    obj.title = data[i][key]
                    obj.isFold = false;
                    obj.isGroupChecked=true;
                    obj.items.push(data[i])
                    filter.push(obj)
                } else {
                    for (var j = 0; j < filter.length; j++) {
                        if (data[i][key] == filter[j].title) {
                            var items = data[i]
                            filter[j].items.push(items)
                            break
                        } else {
                            if (j == filter.length - 1) {
                                var obj = {}
                                obj.title = data[i][key];
                                obj.isFold = false;
                                obj.isGroupChecked=true;
                                filter.push(obj)
                                obj.items = []
                                obj.items.push(data[i])
                                break
                            }
                        }
                    }
                }
            }
            this.caseCheckListFilterDatas = filter;
            this.$apply();
        }
        // 下拉刷新
        onPullDownRefresh() {
            this.caseCheckListFilterDatas = [],
                this.pageNumber = 1;
            this.GetCaseCheckList();
            wx.hideNavigationBarLoading(); //完成停止加载
            wx.stopPullDownRefresh(); //停止下拉刷新
        }
        //上拉加载
        onReachBottom() {
            if (this.totalCount / 10 > this.pageNumber) {
                this.pageNumber += 1;
                this.GetCaseCheckList();
            } else {
                wx.showToast({
                    title: '已经到底了！', //提示的内容,
                    icon: 'none', //图标,
                    duration: 2000, //延迟时间,
                    mask: false, //显示透明蒙层，防止触摸穿透,
                    success: res => {}
                });
            }
        }
        async GetCaseCheckList() {
            wx.showLoading({
                title: 'Loading...', //提示的内容,
                mask: true, //显示透明蒙层，防止触摸穿透,
                success: res => {}
            });
            var searchResult = this.searchResult;
            searchResult.pageNumber = this.pageNumber;
            searchResult.pageSize = this.pageSize;
            var resData = await ajax.getData(
                '/api/services/web/caseCheck/GetCaseCheckList',
                'post',
                searchResult
            )
            if (resData.statusCode == 200) {
                if (resData.data.result.totalCount > 0) {
                    this.totalCount = resData.data.result.totalCount
                    var caseCheckListDatas = resData.data.result.items
                    for (let i = 0, len = caseCheckListDatas.length; i < len; i++) {
                        caseCheckListDatas[i].isChecked = true;
                        caseCheckListDatas[i].isShowLitigantList = false
                    }
                    this.filterData(caseCheckListDatas, this.conditionKey)
                }
            }
            this.$apply();
        }
        computed = {};
        onLoad(options) {
            this.searchResult = JSON.parse(options.jsonResult);
            this.GetCaseCheckList();
        };
        onShow() {};
    }
</script>
