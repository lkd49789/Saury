<!--  -->
<style lang="less">
    .body {
        height: 100%;
        .warming {
            color: #e20000;
        }
        .addImage {
            width: 160rpx;
            height: 160rpx;
            position: fixed;
            bottom: 0;
            right: 0;
            z-index: 9999;
        }
        .top-title {
            height: 104rpx;
            line-height: 104rpx;
            font-size: 48rpx;
            padding-left: 28rpx;
            border-bottom: 1px solid #dedede;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            background: #fff;
            z-index: 99;
        }
        .main {
            margin: 149rpx 28rpx 0 28rpx;
            .checked {
                margin-bottom: 30rpx; //    padding-bottom: 20rpx;
                >view:first-child {
                    margin-bottom: 30rpx;
                }
            }
            .input {
                margin-bottom: 36rpx;
                view:first-child {
                    color: #2a2a2a;
                }
                .input-container {
                    display: flex;
                    align-items: center; // justify-content: center;
                    width: 100%;
                    padding: 28rpx 0;
                    >input {
                        width: 100%;
                    }
                }
            }
            .option {
                margin-bottom: 36rpx;
                picker {
                    padding: 20rpx 0;
                    border-bottom: 1px solid #dfdfdf;
                    .picker {
                        display: flex;
                        align-items: center;
                        justify-content: space-between;
                        color: #7a7a7a;
                        .part-item {
                            position: relative;
                            margin: 10rpx; // background: #dfdfdf;
                            border: 1px dotted #dedede; // border-radius: 20rpx;
                            padding: 5rpx 20rpx;
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            >icon {
                                position: absolute;
                                bottom: 27rpx;
                                right: -21rpx;
                            }
                        }
                    }
                }
            }
        }
    }
</style>

<template>
    <view class="body">
        <view class="top-title">
            <text>{{title}}</text>
        </view>
        <view class='main'>
            <view class="checked">
                <view>
                    <text>类别</text>
                </view>
                <radio-group class="radio-group" @change="bindPickerChange('Category')" style="padding-bottom:20rpx;border-bottom:1px solid #dfdfdf;">
                    <label class="radio" wx:for="{{Category}}" wx:key="index">
                                <radio value="{{item.value}}" checked="{{item.isShow}}" color="#5d73fa"  />
                                <text  style="margin-right:60rpx">{{item.displayText}}</text>
                            </label>
                </radio-group>
                <view class="warming" wx:if="{{warning[2]}}">
                    <text>结束时间字段是必需的</text>
                </view>
            </view>
            <view class="option">
                <view>
                    <text class="title">客户名称</text>
                </view>
                <picker @change="bindPickerChange('ClientId')" value="{{ClientId.index}}" range="{{ClientId.displayText}}" name='ClientId' disabled="{{ClientId.isSelected}}">
                    <view class="picker" style="background:{{ClientId.isSelected?'#dfdfdf':''}}">
                        <view>
                            <text>{{ClientId.displayText[ClientId.index]}}</text>
                        </view>
                        <icon class="updown iconfont icon-gengduoneirongdianjichakanxiangqing" style="font-size:30rpx;color:#b2b2b2"></icon>
                    </view>
                </picker>
            </view>
            <view class="option">
                <view>
                    <text class="title">案件名称</text>
                </view>
                <picker @change="bindPickerChange('CaseId')" value="{{CaseId.index}}" range="{{CaseId.displayText}}" name='CaseId' disabled="{{CaseId.isSelected}}">
                    <view class="picker" style="background:{{CaseId.isSelected?'#dfdfdf':''}}">
                        <view>
                            <text>{{CaseId.displayText[CaseId.index]}}</text>
                        </view>
                        <icon class="updown iconfont icon-gengduoneirongdianjichakanxiangqing" style="font-size:30rpx;color:#b2b2b2"></icon>
                    </view>
                </picker>
            </view>
            <StartTime :timeObj.sync="dateOptions" :dateData.sync='StartTime' :twoWayTitle="StartTime" />
            <view class="warming" wx:if="{{dateOptions.isData}}" style="margin:-36rpx 0 36rpx 0">
                <text>开始时间字段是必需的</text>
            </view>
            <EndTime :timeObj.sync="dateOptions1" :dateData.sync='EndTime' :twoWayTitle="EndTime" />
            <view class="warming" wx:if="{{dateOptions1.isData}}" style="margin:-36rpx 0 36rpx 0">
                <text>结束时间字段是必需的</text>
            </view>
            <view class="input">
                <view>
                    <text>自报时长(小时)</text>
                </view>
                <view class="input-container" style="border-bottom:1px solid {{inputChecked[0]?'#5d73fa':'#dedede'}};color:#7a7a7a">
                    <input id="SelfDuration" name="SelfDuration" bindfocus="bindfocus('{{0}}')" bindblur="bindblur('{{0}}')" placeholder="请输入自报时长" bindinput="bindinput" type="digit" value="{{  SelfDuration }}" />
                    <!-- EndTime[3] - StartTime[3] > 0 && EndTime[2] == StartTime[2] && EndTime[1] == StartTime[1] && EndTime[0] == StartTime[0] ? EndTime[3]-StartTime[3] + '.0' :SelfDuration -->
                </view>
                <view class="warming" wx:if="{{warning[3]}}">
                    <text>自报时长必须在0和24之间</text>
                </view>
            </view>
            <view class="option">
                <view>
                    <text class="title">工作类别</text>
                </view>
                <picker @change="bindPickerChange('WorkType')" value="{{WorkType.index}}" range="{{WorkType.displayText}}" name='WorkType' disabled="{{WorkType.isSelected}}">
                    <view class="picker" style="background:{{WorkType.isSelected?'#dfdfdf':''}}">
                        <view>
                            <text>{{WorkType.displayText[WorkType.index]}}</text>
                        </view>
                        <icon class="updown iconfont icon-gengduoneirongdianjichakanxiangqing" style="font-size:30rpx;color:#b2b2b2"></icon>
                    </view>
                </picker>
                <view class="warming" wx:if="{{warning[0]}}">
                    <text>工作类别字段是必需的</text>
                </view>
            </view>
            <view class="option">
                <view>
                    <text class="title">参与人</text>
                </view>
                <picker @change="bindPickerChange('Participant')" value="{{Participant.index[Participant.index.length-1]}}" range="{{Participant.displayText}}" name='Participant'>
                    <view class="picker">
                        <view style="display:flex;flex-wrap: wrap">
                            <repeat for="{{Participant.index}}" key="index" index="index" item="item">
                                <view class="part-item">
                                    <text>{{Participant.displayText[item]}}</text>
                                    <icon class="iconfont icon-zirenwushanchu1" style="font-size:48rpx" catchtap="deletePItem('{{index}}')"></icon>
                                </view>
                            </repeat>
                        </view>
                        <icon class="updown iconfont icon-gengduoneirongdianjichakanxiangqing" style="font-size:30rpx;color:#b2b2b2"></icon>
                    </view>
                </picker>
            </view>
            <view class="input">
                <view>
                    <text>描述</text>
                </view>
                <!-- <view class="input-container" style="border-bottom:1px solid {{inputChecked[1]?'#5d73fa':'#dedede'}};color:#7a7a7a">
                            <textarea id="Description" name="Description" bindfocus="bindfocus('{{1}}')" bindblur="bindblur('{{1}}')"  placeholder="请输入描述" bindinput="bindinput"  value="{{Description}}" auto-height style="width:100%"/>
                        </view> -->
                <view class="input-container" style="border-bottom:1px solid {{inputChecked[1]?'#5d73fa':'#dedede'}};color:#7a7a7a">
                    <textarea id="Description" name="Description" bindfocus="bindfocus('{{1}}')" bindblur="bindblur('{{1}}')" placeholder="请输入描述" bindinput="bindinput" type="text" value="{{Description}}" auto-height style="width:83%" />
                </view>
                <view class="warming" wx:if="{{warning[1]}}">
                    <text>描述字段是必需的</text>
                </view>
            </view>
            <view class="input">
                <view>
                    <text>备注</text>
                </view>
                <view class="input-container" style="border-bottom:1px solid {{inputChecked[2]?'#5d73fa':'#dedede'}};color:#7a7a7a">
                    <textarea id="Remark" name="Remark" bindfocus="bindfocus('{{2}}')" bindblur="bindblur('{{2}}')" placeholder="请输入备注" bindinput="bindinput" type="text" value="{{Remark?Remark:''}}" auto-height style="width:83%" />
                </view>
            </view>
        </view>
        <image src="{{'../../../../images/test.png'}}" style="opacity:{{addOpacity}} ;"  mode="scaleToFill" lazy-load="true" class="addImage" @touchstart="touchStart" @touchend="touchEnd">
        </image>
    </view>
</template>

<script>
    import wepy from 'wepy';
    import { GeneralComboboxList } from '@/api/common.js'
    import { WorklogForEdit ,OrUpdateWorklog } from '@/api/myRecord.js'
    import {
        myDistinct
    } from '@/utils/cofig/api.js';
    import StartTime from '@/components/Date/DateTimePicker';
    import EndTime from '@/components/Date/DateTimePicker';
    export default class clientDetailCompile extends wepy.page {
        components = {
            StartTime,
            EndTime
        };
        data = {
            addOpacity:1,
            optionsData: {},
            title: '',
            submitData: {
                // AttachmentId: "",
                // CaseId: "082C13A4-9543-E811-8884-F6126329C109",
                // Category: "0",
                // ClientId: "CL20180400075",
                // Description: "描述",
                // End: "16:00",
                // EndTime: "2018-10-18 16:00:00",
                // Id: "WL7ea15d16e6a98c3a",
                // IsConverted: "False",
                // Origin: "WLb004f5eeda32ebe1",
                // Participant: "84,86,164",
                // Remark: "备注",
                // SelfDuration: "10",
                // Start: "15:00",
                // StartTime: "2018-10-18 15:00:00",
                // WorkDate: "2018-10-18",
                // WorkType: "05"
            },
            inputChecked: [
                false,
                false,
                false,
            ],
            warning: [
                false,
                false,
                false
            ],
            // 类别
            Category: null,
            //客户名称
            ClientId: {
                value: [],
                displayText: [],
                index: -1,
            },
            //案件名称
            CaseId: {
                value: [],
                displayText: [],
                index: -1,
            },
            //时间选择器
            dateOptions: {
                title: '开始时间',
                name: 'StartTime',
                // isChecked:false,
                time: '',
                date: true
            },
            StartTime: '',
            dateOptions1: {
                title: '结束时间',
                name: 'endTime',
                // isChecked:false,
                time: '',
                date: false
            },
            EndTime: '',
            // 自报时长
            SelfDuration: 0,
            //工作类别
            WorkType: {
                value: [],
                displayText: [],
                index: -1,
            },
            //参与人
            Participant: {
                value: [],
                displayText: [],
                index: [],
            },
            // 描述
            Description: '',
            //备注
            Remark: '',
            Timeout: '',
            isData: false,
        };
        watch = {
            StartTime(start) {
                this.submitData.StartTime = start[0] + '/' + start[1] + '/' + start[2] + ' ' + start[3] + ':' + start[4] + ':' + start[5]
                this.$apply();
            },
            EndTime(end) {
                this.submitData.EndTime = end[0] + '/' + end[1] + '/' + end[2] + ' ' + end[3] + ':' + end[4] + ':' + end[5]
                this.$apply();
            },
            SelfDuration(value){
                 if(value>24){
                    this.warning[3] = true;
                 }else{
                     this.warning[3] = false
                    this.submitData.SelfDuration = value;
                 }
            }
        };
        computed={
            SelfDuration(){
                var start = new Date(this.submitData.StartTime).getTime();
                var end = new Date(this.submitData.EndTime).getTime();
                var time = end - start;
                var  hours = time / 3600000 < 1 ? 0 : (time / 3600000).toFixed(1);
                var  minute = time % 3600000 / 60000 > 0 ? (time % 3600000 / 60000 / 60).toFixed(2) : 0;
                var mistiming=(Number(hours)+Number(minute)).toFixed(2);
                return  mistiming;
            }
        }
        methods = {
            touchStart(){
                this.addOpacity = 0.6;
                this.$apply();
            },
            touchEnd(){
                if (this.submitData.WorkType && this.submitData.Description) {
                    this.CreateOrUpdateWorklog(this.submitData);
                } else {
                   this.addOpacity = 1;
                    if (!this.submitData.Description) {
                        this.warning[1] = true
                    }
                    if (!this.submitData.WorkType) {
                        this.warning[0] = true
                    }
                    if (!this.submitData.Category) {
                        this.warning[2] = true
                    }
                    if (!this.submitData.StartTime) {
                        this.dateOptions.isData = true;
                    }
                    if (!this.submitData.EndTime) {
                        this.dateOptions1.isData = true;
                    }
                }
                this.$apply();
            },
            deletePItem(index) {
                this.Participant.index.splice(index, 1);
                var Pvalue = this.submitData.Participant.split(',');
                Pvalue.splice(index, 1)
                Pvalue = Pvalue.toString();
                this.submitData.Participant = Pvalue;
                this.$apply();
            },
            bindPickerChange(res, e) {
                switch (res) {
                    case 'Category':
                        this.warning[2] = false;
                        this.submitData.Category = e.detail.value;
                        break;
                    case 'WorkType':
                        this.warning[0] = false
                        this.WorkType.index = +e.detail.value;
                        this.submitData.WorkType = this.WorkType.value[this.WorkType.index];
                        break;
                    case 'ClientId':
                        this.ClientId.index = +e.detail.value;
                        this.submitData.ClientId = this.ClientId.value[this.ClientId.index];
                        this.GetCaseComboboxList(this.ClientId.value[this.ClientId.index]);
                        this.EmployeeComboboxList();
                        break;
                    case 'CaseId':
                        this.CaseId.index = +e.detail.value;
                        this.submitData.CaseId = this.CaseId.value[this.CaseId.index];
                        this.EmployeeComboboxList(this.CaseId.value[this.CaseId.index]);
                        break;
                        break;
                    case 'Participant':
                        this.warning[3] = false;
                        this.Participant.index.push(+e.detail.value);
                        myDistinct(this.Participant.index);
                        var Pindex = this.Participant.index;
                        var Pvalue = [];
                        for (var index in Pindex) {
                            Pvalue[index] = this.Participant.value[Pindex[index]];
                        }
                        this.submitData.Participant = Pvalue.toString();
                        break;
                    default:
                        break;
                }
                this.$apply();
            },
            bindinput(e) {
                var inputData = e.detail.value;
                switch (e.target.id) {
                    case 'Description':
                        if (inputData) {
                            this.submitData.Description = e.detail.value;
                            this.warning[1] = false;
                        } else {
                            this.warning[1] = true;
                            this.submitData.Description = '';
                        }
                        this.$apply();
                        break;
                    case 'Remark':
                        this.submitData.Remark = e.detail.value;
                        break
                    case 'SelfDuration':
                        if (+e.detail.value > 24) {
                            this.warning[3] = true
                        } else {
                            this.warning[3] = false
                            this.submitData.SelfDuration = e.detail.value;
                        }
                        break
                    default:
                        break;
                }
                this.$apply();
            },
            // input获取焦点
            bindfocus(index, e) {
                if (e.target.id == 'Description' && !e.detail.value) {
                    this.warning[1] = true;
                }
                this.inputChecked[index] = !this.inputChecked[index];
                this.$apply();
            },
            //input失去焦点
            bindblur(index) {
                this.inputChecked[index] = !this.inputChecked[index];
                this.$apply();
            },
        };
        async GetWorklogForEdit(data) {
            var formatData = {
                id: data.id,
                clientid: data.clientId,
                caseid: data.caseId,
                // isconverted: true,
            }
            var resData = await WorklogForEdit(
                formatData
            )
            if (resData.statusCode == 200) {
                var WorklogForEditData = resData.data.result;
                //类别
                var categoryCombobox = WorklogForEditData.categoryCombobox;
                for (var i = 0; i < categoryCombobox.length; i++) {
                    if (categoryCombobox[i].isSelected) {
                        categoryCombobox[i]['isShow'] = true;
                        this.submitData.Category = categoryCombobox[i].value;
                    }
                }
                this.Category = categoryCombobox;
                //客户名称
                this.submitData.ClientId = WorklogForEditData.clientId;
                this.GetClientComboboxList(WorklogForEditData.clientId);
                // 案件名称
                this.submitData.CaseId = WorklogForEditData.caseId;
                this.GetCaseComboboxList(WorklogForEditData.clientId, WorklogForEditData.caseId);
                //工作类别
                this.submitData.WorkType = WorklogForEditData.workType;
                var workType = WorklogForEditData.workType
                for (var index in WorklogForEditData.workTypeCombobox) {
                    this.WorkType.value[index] = WorklogForEditData.workTypeCombobox[index].value;
                    this.WorkType.displayText[index] = WorklogForEditData.workTypeCombobox[index].displayText;
                }
                // this.WorkType.isSelected=true;
                if (workType) {
                    var WorkType = this.WorkType.value;
                    for (var index in WorkType) {
                        if (WorkType[index] == workType) {
                            this.WorkType.index = index;
                        }
                    }
                }
                //参与人
                // if(WorklogForEditData.isConverted){
                var participantValue = [];
                for (var Pindex in WorklogForEditData.participantCombobox) {
                    participantValue.push(WorklogForEditData.participantCombobox[Pindex].value);
                }
                this.submitData.Participant = participantValue.toString();
                this.GetEmployeeComboboxList(participantValue);
                this.Participant.isSelected = true;
                // }else{
                //     this.Participant.isSelected=false;
                // }
                //自报时长
                this.submitData.SelfDuration = WorklogForEditData.selfDuration;
                this.SelfDuration = WorklogForEditData.selfDuration;
                //描述
                this.submitData.Description = WorklogForEditData.description;
                this.Description = WorklogForEditData.description;
                //备注
                this.submitData.Remark = WorklogForEditData.remark;
                this.Remark = WorklogForEditData.remark;
                if (WorklogForEditData.IsConverted) {
                    this.submitData.IsConverted = WorklogForEditData.IsConverted;
                }
                this.submitData.Origin = WorklogForEditData.origin
                this.submitData.Id = WorklogForEditData.id;
                this.$apply();
            } else {
                wx.showToast({
                    title: '网络故障',
                    icon: 'none',
                    duration: 1500,
                    mask: false,
                });
            }
            this.$apply();
        }
        async GetCaseComboboxList(clientId, caseId) {
            var data = {
                class: 'case',
                parentId: clientId,
            }
            var resData = await GeneralComboboxList(data)
            if (resData.statusCode == 200) {
                this.submitData.CaseId = '';
                this.CaseId.index = -1;
                this.CaseId.value = [];
                this.CaseId.displayText = [];
                var ComboboxList = resData.data.result
                for (var index in ComboboxList) {
                    var item = ComboboxList[index];
                    this.CaseId.value[index] = item.value;
                    this.CaseId.displayText[index] = item.displayText;
                    if (this.CaseId.value[index] == caseId) {
                        this.CaseId.index = index
                    }
                }
                this.$apply();
            }
        }
        async GetClientComboboxList(clientValue) {
            var data = {
                class: 'client',
                parentId: ""
            }
            var resData = await GeneralComboboxList(data)
            if (resData.statusCode == 200) {
                var ComboboxList = resData.data.result
                for (var index in ComboboxList) {
                    var item = ComboboxList[index];
                    this.ClientId.value[index] = item.value;
                    this.ClientId.displayText[index] = item.displayText;
                    if (item.value == clientValue) {
                        this.ClientId.index = index
                    }
                }
            }
            this.$apply();
        }
        async GetEmployeeComboboxList(participantValue) {
            var data = {
                class: 'employee',
                shortCode: this.optionsData.caseId
            }
            var resData = await GeneralComboboxList(data)
            if (resData.statusCode == 200) {
                var ComboboxList = resData.data.result;
                // this.Participant.value=[];
                // this.Participant.displayText=[];
                // this.Participant.isSelected=false;
                // this.Participant.index=[];
                for (var index in ComboboxList) {
                    var item = ComboboxList[index];
                    this.Participant.value[index] = item.value;
                    this.Participant.displayText[index] = item.displayText;
                    for (var pIndex in participantValue) {
                        if (participantValue[pIndex] == item.value) {
                            this.Participant.index.push(index);
                        }
                    }
                }
            }
            this.$apply();
        }
        async EmployeeComboboxList(...arg) {
            var data = {
                class: 'employee',
                shortCode: arg[0]
            }
            var resData = await GeneralComboboxList(data)
            if (resData.statusCode == 200) {
                this.Participant.value = [];
                this.Participant.displayText = [];
                this.Participant.index = [];
                this.submitData.Participant = '';
                var ComboboxList = resData.data.result;
                for (var index in ComboboxList) {
                    var item = ComboboxList[index];
                    this.Participant.value[index] = item.value;
                    this.Participant.displayText[index] = item.displayText;
                }
            }
            this.$apply();
        }
        async CreateOrUpdateWorklog(data) {
             wx.showLoading({
                 title: '提交中，请稍等！', //提示的内容,
                 mask: true, //显示透明蒙层，防止触摸穿透,
                 success:()=> {
                     this.addOpacity = 1;
                     this.$apply();
                 }
               });
            var resData = await OrUpdateWorklog(
                data
            );
            if (resData.statusCode == 200) {
                 var isRefresh = wx.getStorageSync('isRefresh');
                        isRefresh.isRefresh = true;
                        wx.setStorageSync('isRefresh', isRefresh);
                        wx.navigateBack({
                            delta: 1
                    });
            } else {
                wx.showToast({
                    title: '提交失败！',
                    icon: 'none',
                    duration: 1500,
                    mask: true,
                });
            }
        }
        onLoad(options) {
            var data = JSON.parse(options.data)
            this.optionsData = data;
            this.dateOptions.time = data.startTime.Y + ' ' + data.startTime.M;
            this.dateOptions1.time = data.endTime.Y + ' ' + data.endTime.M;
            this.dateOptions1.date = true;
            this.title = "编辑工作日志"
            this.$apply();
        }
        onShow() {
        }
        onReady() {
            this.GetWorklogForEdit(this.optionsData);
        }
        onUnload() {
            // clearTimeout(this.Timeout);
        }
    }
</script>